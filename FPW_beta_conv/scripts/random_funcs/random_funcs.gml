#region p random
///@arg x
function p_random (argument0) begin
	_G.p_random_index = (_G.p_random_index + 1) % _G.random_table_size;
	return _G.random_table[_G.p_random_index] * argument0;
end

///@arg x
function p_irandom (argument0) begin
	return floor(p_random(argument0) + 0.5);
end

///@arg min
///@arg max
function p_irandom_range (argument0, argument1) begin
	return floor(p_random_range(argument0, argument1) + 0.5);
end

///@arg min
///@arg max
function p_random_range (argument0, argument1) begin
	_G.p_random_index = (_G.p_random_index + 1) % _G.random_table_size;
	var mn = argument0;
	var mx = argument1;
	var val = _G.random_table[_G.p_random_index]

	return val * (mx - mn) + mn;
end

#endregion

#region m random
///@arg x
function m_random (argument0) begin
	var inc = dt() * game_get_speed(gamespeed_fps) * _G.m_random_scale;
	_G.m_random_index = (_G.m_random_index + inc) % _G.random_table_size;
	return _G.random_table[floor(_G.m_random_index)] * argument0;
end

///@arg x
function m_irandom (argument0) begin
	return floor(m_random(argument0) + 0.5);
end

///@arg min
///@arg max
function m_irandom_range (argument0, argument1) begin
	return floor(m_random_range(argument0, argument1) + 0.5);
end

///@arg min
///@arg max
function m_random_range (argument0, argument1) begin
	var inc = dt() * game_get_speed(gamespeed_fps) * _G.m_random_scale;
	_G.m_random_index = (_G.m_random_index + inc) % _G.random_table_size;

	var mn = argument0;
	var mx = argument1;
	var val = _G.random_table[floor(_G.m_random_index)]

	return val * (mx - mn) + mn;
end

#endregion

_G.p_random_index = 0;
_G.m_random_index = 0;
_G.m_random_scale = 1.;

#region random table
_G.random_table = [
	0.80371653,
	0.96276921,
	0.25496661,
	0.64740748,
	0.87677043,
	0.53835479,
	0.19197852,
	0.41108294, // 8
	0.38189946,
	0.97780259,
	0.83870878,
	0.19087718,
	0.81024369,
	0.04753496,
	0.75586789,
	0.25096144, // 16
	0.98980472,
	0.35258567,
	0.38153907,
	0.09698125,
	0.94754964,
	0.47140836,
	0.12025329,
	0.81894142, // 24
	0.37623413,
	0.83137534,
	0.19958684,
	0.93082981,
	0.05529173,
	0.00884610,
	0.45060651,
	0.26619454, // 32
	0.60756299,
	0.23698544,
	0.96724896,
	0.26144579,
	0.09337986,
	0.04157442,
	0.93689700,
	0.18381384, // 40
	0.55911060,
	0.68936046,
	0.52772809,
	0.65426482,
	0.14081801,
	0.98649630,
	0.69304021,
	0.68829882, // 48
	0.67783091,
	0.39134999,
	0.64998076,
	0.31615980,
	0.58711747,
	0.51705333,
	0.17891108,
	0.58327813, // 56
	0.16283849,
	0.82857709,
	0.69382839,
	0.26389867,
	0.04023008,
	0.27284828,
	0.00108462,
	0.69791674, // 64
	0.49750033,
	0.96762671,
	0.72874954,
	0.52948712,
	0.49109238,
	0.75389141,
	0.82758738,
	0.85970994, // 72
	0.77250234,
	0.49982159,
	0.88294402,
	0.08240976,
	0.07415356,
	0.37023976,
	0.91598607,
	0.05625413, // 80
	0.43935203,
	0.11112356,
	0.53203207,
	0.56027374,
	0.21554730,
	0.10021057,
	0.11523396,
	0.50655395, // 88
	0.77425072,
	0.90932117,
	0.73389544,
	0.17292842,
	0.38877746,
	0.76908488,
	0.76479674,
	0.17929919, // 96
	0.61504792,
	0.35558640,
	0.92387075,
	0.75355081,
	0.91271217,
	0.48812246,
	0.64362668,
	0.46696835, // 104
	0.39534914,
	0.93718686,
	0.96666836,
	0.25994440,
	0.91621522,
	0.25541102,
	0.58907481,
	0.99842275, // 112
	0.28201386,
	0.38571460,
	0.42505976,
	0.32876576,
	0.69869426,
	0.10901615,
	0.60342246,
	0.56755220, // 120
	0.68275439,
	0.86236337,
	0.76002313,
	0.95744081,
	0.44873089,
	0.56382958,
	0.44579054,
	0.22881043, // 128
	0.48067238,
	0.15640350,
	0.99896790,
	0.62185606,
	0.95398644,
	0.21513739,
	0.20755394,
	0.77325119, // 136
	0.06160687,
	0.98516597,
	0.64198274,
	0.07740228,
	0.27654609,
	0.99426112,
	0.21945171,
	0.23639148, // 144
	0.88021796,
	0.27200869,
	0.96493177,
	0.76792577,
	0.41226062,
	0.99813739,
	0.43355090,
	0.04646987, // 152
	0.09771555,
	0.88111483,
	0.86273561,
	0.02479985,
	0.71712696,
	0.66116518,
	0.73447086,
	0.29205295, // 160
	0.14851432,
	0.85872287,
	0.01303599,
	0.47174343,
	0.22310596,
	0.85967081,
	0.69990174,
	0.34450461, // 168
	0.14745238,
	0.23618032,
	0.35987310,
	0.26468793,
	0.56133116,
	0.00000453,
	0.65227011,
	0.24630122, // 176
	0.79455665,
	0.89851835,
	0.55109347,
	0.92351379,
	0.20363926,
	0.40379909,
	0.29934329,
	0.58873375, // 184
	0.37180038,
	0.85898075,
	0.55714535,
	0.55624751,
	0.61302480,
	0.05848998,
	0.74664357,
	0.15038001, // 192
	0.42122550,
	0.67893559,
	0.47620235,
	0.37842220,
	0.64110205,
	0.90675829,
	0.84474851,
	0.05253249, // 200
	0.62067161,
	0.59609921,
	0.87950636,
	0.96114379,
	0.74108848,
	0.29287376,
	0.41257591,
	0.34519828, // 208
	0.27736923,
	0.27830328,
	0.23733110,
	0.46741659,
	0.82391256,
	0.81015146,
	0.83994795,
	0.29308835, // 216
	0.67330296,
	0.71496136,
	0.30462757,
	0.73059440,
	0.12747583,
	0.40695223,
	0.54488479,
	0.84669953, // 224
	0.02172356,
	0.94792380,
	0.34761405,
	0.77527959,
	0.06062123,
	0.89748431,
	0.35451167,
	0.83045662, // 232
	0.61975780,
	0.64109536,
	0.38154870,
	0.21539351,
	0.38403958,
	0.11229176,
	0.49708241,
	0.30689293, // 240
	0.18706739,
	0.29083304,
	0.43324113,
	0.26566348,
	0.25061205,
	0.06226658,
	0.21213286,
	0.93861172, // 248
	0.35234108,
	0.29382462,
	0.03043220,
	0.11115060,
	0.80547447,
	0.70197891,
	0.45538453,
	0.06989302, // 256
];
#endregion

_G.random_table_size = array_size(_G.random_table);
